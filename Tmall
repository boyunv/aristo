buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'

group = 'com.sineva.cas'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}



repositories {
    maven { url 'https://maven.aliyun.com/repository/central' }
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven{ url 'https://maven.aliyun.com/repository/google'}
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    maven { url 'https://maven.aliyun.com/repository/spring' }
    maven{ url 'https://maven.aliyun.com/repository/spring-plugin'}
    maven{ url 'https://maven.aliyun.com/repository/grails-core'}
    maven{ url 'https://maven.aliyun.com/repository/apache-snapshots'}

}




dependencies {
    //implementation("org.springframework.boot:spring-boot-devtools")
    //类型转换库
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.7'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    /*implementation 'org.springframework.boot:spring-boot-devtools'*/
    //热部署
    compile("org.springframework.boot:spring-boot-devtools")
    //springboot websocket
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-websocket'
    //spring-integration-mqtt
    compile group: 'org.springframework.integration', name: 'spring-integration-mqtt', version: '5.3.2.RELEASE'
    //netty
    compile group: 'io.netty', name: 'netty-codec-mqtt', version: '4.1.51.Final'
    compile group: 'io.netty', name: 'netty-handler', version: '4.1.51.Final'
    compile 'com.google.code.findbugs:jsr305:3.0.2'
    //security
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.2.4.RELEASE'
    //pagehelper
    compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: '1.2.3'
    //逆向工程Jpa
    //compile group: 'javax.persistence', name: 'persistence-api', version: '1.0.2'
   //swagger2
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.8.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.8.0'
    //thymeleaf
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: '2.2.4.RELEASE'
    compile group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect', version: '2.4.1'
    //commons-lang3
    compile("org.apache.commons:commons-lang3:3.8.1")
    compile('org.apache.poi:poi:3.14')
    compile group: 'org.reflections', name: 'reflections', version: '0.9.11'
    //jackson
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.3'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.10.3'
    //mapstruct
    compile group: 'org.mapstruct', name: 'mapstruct-jdk8', version: '1.2.0.Final'
    //joda-time
    compile('joda-time:joda-time:+')
    //grpc
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.13.0'
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.13.0'
    compile "io.grpc:grpc-netty:1.10.0"
    compile "io.grpc:grpc-protobuf:1.10.0"
    compile "io.grpc:grpc-stub:1.10.0"
    //引入grpc-server所需依赖，springboot集成的
    //compile 'net.devh:grpc-server-spring-boot-starter:1.4.0.RELEASE'

    //quartz
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-quartz', version: '2.3.1.RELEASE'


    compileOnly 'org.mapstruct:mapstruct-processor:1.2.0.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.2.0.Final'
    compileOnly 'org.projectlombok:lombok'
    //developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compile fileTree(dir:'/src/main/resources/lib/',include:['*.jar'])
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

//https://weiku.co/article/135/
//以下代码分离lib jar依赖
// 清除现有的lib目录
task clearJar(type: Delete) {
    delete "$buildDir/libs/lib"
}

// 将依赖包复制到lib目录
task copyJar(type: Copy, dependsOn: 'clearJar') {
    from configurations.compileClasspath
    into "$buildDir/libs/lib"
}

idea {
    module {
        inheritOutputDirs = true
    }
}

//将资源文件拷贝到test模块下面
task copyTestResources(type: Copy) {
    from "${projectDir}/src/main/resources"
    into "${projectDir}/src/test/resources"
}

//task copyTestResources(type: Copy) {
//    from "${projectDir}/src/test/resources"
//    into "${buildDir}/classes/test"
//}

processTestResources.dependsOn copyTestResources

////单元测试时引用src/test下的资源文件
sourceSets.test {
    resources.srcDirs = ["src/test"]
}

bootJar {
    // 例外所有的jar
    excludes = ["*.jar"]
    // lib目录的清除和复制任务
    dependsOn clearJar
    dependsOn copyJar

    // 指定依赖包的路径
    manifest {
        attributes "Manifest-Version": 1.0,
                'Class-Path': configurations.compileClasspath.files.collect { "lib/$it.name" }.join(' ')
    }
}

test {
    useJUnitPlatform()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.2.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.4.0'
        }
    }

    generatedFilesBaseDir = "$projectDir/src/"

    generateProtoTasks {
        all()*.plugins {
            grpc {
                outputSubDir = "java"
            }
        }
    }
}

sourceSets {
    main {
        proto {
            // In addition to the default 'src/main/proto'
            srcDir 'src/main/java/com/sineva/cas/common/grpc/protobuf'
            // In addition to the default '**/*.proto' (use with caution).
            // Using an extension other than 'proto' is NOT recommended,
            // because when proto files are published along with class files, we can
            // only tell the type of a file from its extension.
            include '**/*.protodevel'
        }
    }
    test {
        proto {
            // In addition to the default 'src/test/proto'
            srcDir 'src/test/resources/protobuf'
        }
    }

}


